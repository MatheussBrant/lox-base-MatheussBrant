?start     : program

program    : stmt*

?stmt      : expr ";"
           | print_cmd
           // | if_cmd
           // | for_cmd
           // | ...

print_cmd  : "print" expr ";"

// EXPRESSÃ•ES
?expr      : logic_or

?logic_or  : logic_or "or" logic_and   -> or_
           | logic_and

?logic_and : logic_and "and" test       -> and_
           | test

?test      : test "==" cmp  -> eq
           | test "!=" cmp  -> ne
           | cmp

?cmp       : cmp ">" factor   -> gt
           | cmp "<" factor   -> lt
           | cmp ">=" factor  -> ge
           | cmp "<=" factor  -> le
           | factor

?factor    : factor "+" term  -> add
           | factor "-" term  -> sub
           | term

?term      : term "*" unary   -> mul
           | term "/" unary   -> div 
           | unary

?unary     : "!" unary        -> not_
           | "-" unary        -> neg
           | atom

?atom      : atom "(" params ")"   -> call      
           | atom "." VAR          -> getattr
           | NUMBER 
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" expr ")"

// call       : VAR "(" params ")"   
params     : [ expr ("," expr )* ]

BOOL.2     : "true" | "false"
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT